tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - contract.yaml
  - capabilities.yaml

relationship_types:
  tosca.relationships.callsConstructor:
    derived_from: tosca.relationships.DependsOn
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
        operations:
          post_configure_target:
            inputs:
              previous_constructor_calls:
                {
                  type: list,
                  default: { get_attribute: [SOURCE, addressParameters] },
                }
              new_address:
                {
                  type: string,
                  default: { get_attribute: [TARGET, contractAddress] },
                }
            outputs:
              contract_addresses: [SOURCE, addressParameters]
            implementation:
              primary: playbooks/constructor_calls.yml
    # TODO: set valid target type
    # valid_target_types: [toscachain.nodes.contract]
  tosca.relationships.calls:
    derived_from: tosca.relationships.callsConstructor
    properties:
      # TODO: maybe could be an array of strings
      modifier:
        description: Method name to set callee address
        type: string
        required: true
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
        operations:
          post_configure_source:
            inputs:
              caller_address:
                {
                  type: string,
                  default: { get_attribute: [SOURCE, contractAddress] },
                }
              caller_private_key:
                {
                  type: string,
                  default: { get_property: [SOURCE, privateKey] },
                }
              network:
                { type: string, default: { get_property: [SOURCE, network] } }
              caller_abi:
                { type: string, default: { get_property: [SOURCE, abi] } }
              caller_address_setter:
                { type: string, default: { get_property: [SELF, modifier] } }
              callee_address:
                {
                  type: string,
                  default: { get_attribute: [TARGET, contractAddress] },
                }
            implementation:
              primary: playbooks/set_address.yml
              dependencies:
                - scripts/
                - contracts/
          target_changed:
            inputs:
              caller_address:
                {
                  type: string,
                  default: { get_attribute: [SOURCE, contractAddress] },
                }
              caller_private_key:
                {
                  type: string,
                  default: { get_property: [SOURCE, privateKey] },
                }
              network:
                { type: string, default: { get_property: [SOURCE, network] } }
              caller_abi:
                { type: string, default: { get_property: [SOURCE, abi] } }
              caller_address_setter:
                { type: string, default: { get_property: [SELF, modifier] } }
              callee_address:
                {
                  type: string,
                  default: { get_attribute: [TARGET, contractAddress] },
                }
            implementation:
              primary: playbooks/set_address.yml
              dependencies:
                - scripts/
                - contracts/
          remove_target:
            inputs:
              caller_address:
                {
                  type: string,
                  default: { get_attribute: [SOURCE, contractAddress] },
                }
              caller_private_key:
                {
                  type: string,
                  default: { get_property: [SOURCE, privateKey] },
                }
              network:
                { type: string, default: { get_property: [SOURCE, network] } }
              caller_abi:
                { type: string, default: { get_property: [SOURCE, abi] } }
              caller_address_setter:
                { type: string, default: { get_property: [SELF, modifier] } }
              callee_address:
                {
                  type: string,
                  default: "0x0000000000000000000000000000000000000000",
                }
            implementation:
              primary: playbooks/set_address.yml
              dependencies:
                - scripts/
                - contracts/
  tosca.relationships.libraryLinkage:
    derived_from: tosca.relationships.DependsOn
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
        operations:
          pre_configure_source:
            inputs:
              library:
                { type: string, default: { get_property: [TARGET, abi] } }
              library_address:
                {
                  type: string,
                  default: { get_attribute: [TARGET, contractAddress] },
                }
              bytecode:
                { type: string, default: { get_attribute: [SOURCE, bytecode] } }
            outputs:
              contract_bytecode: [SOURCE, bytecode]
            implementation:
              primary: playbooks/link_library.yml
              dependencies:
                - scripts/
                - contracts/
  tosca.relationships.facet:
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [tosca.capabilities.Facet]
    properties:
      # TODO: maybe could be an array of strings
      exclude:
        description: facet functions to exclude
        type: list
        default: []
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
        operations:
          post_configure_source:
            inputs:
              diamond_address:
                {
                  type: string,
                  default: { get_attribute: [SOURCE, contractAddress] },
                }
              diamond_private_key:
                {
                  type: string,
                  default: { get_property: [SOURCE, privateKey] },
                }
              network:
                { type: string, default: { get_property: [SOURCE, network] } }
              cut_abi:
                { type: string, default: { get_property: [SOURCE, cut, abi] } }
              cut_bytecode:
                { type: string, default: { get_attribute: [SOURCE, cut, bytecode] } }
              facet_address:
                {
                  type: string,
                  default: { get_attribute: [TARGET, contractAddress] },
                }
              facet_abi:
                { type: string, default: { get_attribute: [TARGET, abi] } }
              facet_bytecode:
                { type: string, default: { get_attribute: [TARGET, bytecode] } }
              # init_address:
              #   {
              #     type: string,
              #     default: { get_attribute: [SOURCE, init, contractAddress] },
              #   }
              # init_abi:
              #   {
              #     type: string,
              #     default: { get_property: [SOURCE, init, abi] },
              #   }
              # init_function:
              #   {
              #     type: string,
              #     default: { get_property: [SOURCE, init, initFunction] },
              #   }
              # init_parameters:
              #   {
              #     type: string,
              #     default: { get_property: [SOURCE, init, initParameters] },
              #   }
            implementation:
              primary: playbooks/set_facet.yml
              dependencies:
                - scripts/
                - contracts/
          # target_changed:
          #   inputs:
          #     diamond_address:
          #       { type: string, default: { get_attribute: [SOURCE, contractAddress] } }
          #     diamond_private_key:
          #       { type: string, default: { get_property: [SOURCE, privateKey] } }
          #     network:
          #       { type: string, default: { get_property: [SOURCE, network] } }
          #     cut_abi:
          #       { type: string, default: { get_property: [SOURCE, cut, abi] } }
          #     facet_address:
          #       { type: string, default: { get_attribute: [TARGET, contractAddress] } }
          #     facet_abi:
          #       { type: string, default: { get_attribute: [TARGET, abi] } }
          #   implementation:
          #     primary: playbooks/change_facet.yml
          #     dependencies:
          #       - scripts/
          #       - contracts/
          remove_target:
            inputs:
              diamond_address:
                {
                  type: string,
                  default: { get_attribute: [SOURCE, contractAddress] },
                }
              diamond_private_key:
                {
                  type: string,
                  default: { get_property: [SOURCE, privateKey] },
                }
              network:
                { type: string, default: { get_property: [SOURCE, network] } }
              cut_abi:
                { type: string, default: { get_property: [SOURCE, cut, abi] } }
              facet_address:
                {
                  type: string,
                  default: { get_attribute: [TARGET, contractAddress] },
                }
              facet_abi:
                { type: string, default: { get_attribute: [TARGET, abi] } }
            implementation:
              primary: playbooks/delete_facet.yml
              dependencies:
                - scripts/
                - contracts/
