tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - network.yaml
  - relationships.yaml
  - capabilities.yaml
  - wallet.yaml

node_types:
  # Node used for smart contract not managed by KATENA. contains only the smart contract address
  katena.nodes.contractReference:
    derived_from: tosca.nodes.Root
    attributes:
      contractAddress: # set after playbook execution
        type: string
        description: "address reference of existing contract"
  katena.nodes.library:
    derived_from: tosca.nodes.Root
    capabilities:
      linkable:
        type: katena.capabilities.Linkable
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: katena.nodes.network
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1] # a node smart contract is deployed in only one network at time
      - wallet:
          capability: tosca.capabilities.Container
          node: katena.nodes.wallet
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
      - libraries:
          capability: tosca.capabilities.Container
          node: katena.nodes.library
          relationship: katena.relationships.libraryLinkage
          occurrences: [0, UNBOUNDED]
    properties:
      abi:
        description: path to smart contract ABI
        type: string
        required: true
      privateKey:
        description: privateKey of the address that should perform the deploy
        type: string
        required: true
        default: { get_property: [SELF, wallet, privateKey] }
      network:
        type: string
        required: true
        default: { get_property: [SELF, host, address] }
    attributes:
      contractAddress: # set after playbook execution
        type: string
        description: "Smart contract address when deployed"
      bytecode:
        type: string
        description: "contract bytecode"
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
            outputs:
              contract_bytecode: [SELF, bytecode]
            implementation:
              primary: playbooks/load_bytecode.yml
              dependencies:
                - scripts/
                - contracts/
          configure:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              bytecode:
                { type: string, default: { get_attribute: [SELF, bytecode] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              contract_parameters: { type: list, default: [] }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/deploy_library.yml
              dependencies:
                - scripts/
                - contracts/
  # Node for a generic smart contract
  katena.nodes.contract:
    derived_from: katena.nodes.library
    requirements:
      - calls: # a contract can call other contracts
          capability: katena.capabilities.Callable
          relationship: katena.relationships.calls
          occurrences: [0, UNBOUNDED]
      - constructorCalls: # use this when the smart contract needs an address in its constructor parameters
          capability: katena.capabilities.Callable
          relationship: katena.relationships.callsConstructor
          occurrences: [0, UNBOUNDED]
      - libraries: # define library dependencies
          capability: tosca.capabilities.Container
          node: katena.nodes.library
          relationship: katena.relationships.libraryLinkage
          occurrences: [0, UNBOUNDED]
    capabilities:
      callable:
        type: katena.capabilities.Callable
    properties:
      parameters: # parameters that are not addresses
        type: list
        description: arguments to pass in smart contract constructor. The order must reflect the one in the contract signature.
        default: []
      owner:
        description: owner wallet address
        type: string
        required: false
        default: { get_property: [SELF, wallet, owner] }
      destroy:
        type: string
        description: function to call for self destruct the contract
        required: false
        default: ""
      refund:
        type: string
        description: address to refund for self destructing the contract
        required: false
        default: { get_property: [SELF, owner] }
    attributes:
      addressParameters:
        type: list
        description: used by callConstructor
        default: []
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
            outputs:
              contract_bytecode: [SELF, bytecode]
            implementation:
              primary: playbooks/load_bytecode.yml
              dependencies:
                - scripts/
                - contracts/
          configure:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              bytecode:
                { type: string, default: { get_attribute: [SELF, bytecode] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              address_parameters:
                {
                  type: list,
                  default: { get_attribute: [SELF, addressParameters] },
                }
              contract_parameters:
                { type: list, default: { get_property: [SELF, parameters] } }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/deploy_contract.yml
              dependencies:
                - scripts/
                - contracts/
          delete:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              address:
                {
                  type: string,
                  default: { get_attribute: [SELF, contractAddress] },
                }
              destroy_function:
                { type: string, default: { get_property: [SELF, destroy] } }
              refund:
                { type: string, default: { get_property: [SELF, refund] } }
            implementation:
              primary: playbooks/delete_contract.yml
              dependencies:
                - scripts/
                - contracts/
  katena.nodes.proxy.erc1967:
    derived_from: katena.nodes.contract
    requirements:
      - implementation:
          capability: katena.capabilities.Callable
          relationship: katena.relationships.callsConstructor
          occurrences: [1, 1]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          configure:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              bytecode:
                { type: string, default: { get_attribute: [SELF, bytecode] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              implementationAddress:
                {
                  type: string,
                  default: { get_attribute: [SELF, implementation, contractAddress] },
                }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/proxy_deploy.yml
              dependencies:
                - scripts/
                - contracts/
  katena.nodes.diamond:
    derived_from: katena.nodes.contract
    requirements:
      - facet:
          capability: katena.capabilities.Facet
          relationship: katena.relationships.facet
          occurrences: [0, UNBOUNDED]
      - cut:
          capability: katena.capabilities.Callable
          relationship: katena.relationships.callsConstructor
          occurrences: [1, 1]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          configure:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              owner: { type: string, default: { get_property: [SELF, owner] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              bytecode:
                { type: string, default: { get_attribute: [SELF, bytecode] } }
              cutAbi:
                { type: string, default: { get_property: [SELF, cut, abi] } }
              cutAddress:
                {
                  type: string,
                  default: { get_attribute: [SELF, cut, contractAddress] },
                }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/diamond_contract_deploy.yml
              dependencies:
                - scripts/
                - contracts/
  katena.nodes.diamond.diamondInit:
    derived_from: katena.nodes.contract
    capabilities:
      initFunction:
        type: katena.capabilities.InitFunction
    properties:
      initFunction:
        type: string
        required: true
      initParameters:
        type: list
        default: []
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
            outputs:
              contract_bytecode: [SELF, bytecode]
            implementation:
              primary: playbooks/load_bytecode.yml
              dependencies:
                - scripts/
                - contracts/
          configure:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              bytecode:
                { type: string, default: { get_attribute: [SELF, bytecode] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              address_parameters:
                {
                  type: list,
                  default: { get_attribute: [SELF, addressParameters] },
                }
              contract_parameters:
                { type: list, default: { get_property: [SELF, parameters] } }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/deploy_contract.yml
              dependencies:
                - scripts/
                - contracts/
          delete:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              address:
                {
                  type: string,
                  default: { get_attribute: [SELF, contractAddress] },
                }
              destroy_function:
                { type: string, default: { get_property: [SELF, destroy] } }
              refund:
                { type: string, default: { get_property: [SELF, refund] } }
            implementation:
              primary: playbooks/delete_contract.yml
              dependencies:
                - scripts/
                - contracts/
  katena.nodes.diamond.facet:
    derived_from: katena.nodes.contract
    capabilities:
      facet:
        type: katena.capabilities.Facet
