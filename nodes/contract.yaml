tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - network.yaml
  - relationships.yaml

node_types:
  toscachain.nodes.contract:
    derived_from: tosca.nodes.Root
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: toscachain.nodes.network
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1] # a node smart contract is deployed in only one network at time
      - calls: # a contract can call other contracts
          capability: tosca.capabilities.Callable
          relationship: tosca.relationships.calls
          occurrences: [ 0, UNBOUNDED ]
      - constructorCalls:
          capability: tosca.capabilities.Callable
          relationship: tosca.relationships.callsConstructor
          occurrences: [ 0, UNBOUNDED ]
    capabilities:
      callable:
        type: tosca.capabilities.Callable
    properties:
      abi:
        description: path to smart contract ABI
        type: string
        required: true
      privateKey:
        description: privateKey of the address that should perform the deploy
        type: string
        required: true
      network:
        type: string
        required: true
        default: { get_property: [SELF, host, address] }
      parameters:
        type: list
        description: arguments to pass in smart contract constructor. The order must reflect the one in the contract signature.
        default: []
    attributes:
      contractAddress: # set after playbook execution
        type: string
        description: "Smart contract address when deployed"
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              contract_parameters:
                { type: list, default: { get_property: [SELF, parameters] } }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/deploy_contract.yml
              dependencies:
                - scripts/
                - contracts/

  toscachain.nodes.diamond:
    derived_from: toscachain.nodes.contract
    requirements:
      - facets:
        capability: tosca.capabilities.Callable
        relationship: tosca.relationships.facet
        occurrences: [0, UNBOUNDED]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              facets: { type: map, default: { get_property: [SELF, facets] } }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/diamond_contract.yml
              dependencies:
                - scripts/
                - contracts/
