tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - network.yaml
  - relationships.yaml
  - capabilities.yaml
  - wallet.yaml

node_types:
  toscachain.nodes.contract:
    derived_from: tosca.nodes.Root
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: toscachain.nodes.network
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1] # a node smart contract is deployed in only one network at time
      - calls: # a contract can call other contracts
          capability: tosca.capabilities.Callable
          relationship: tosca.relationships.calls
          occurrences: [0, UNBOUNDED]
      - constructorCalls:
          capability: tosca.capabilities.Callable
          relationship: tosca.relationships.callsConstructor
          occurrences: [0, UNBOUNDED]
      - wallet:
          capability: tosca.capabilities.Container 
          node: toscachain.nodes.wallet
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1] 
      - libraries:  
          capability: tosca.capabilities.Container 
          node: toscachain.nodes.contract
          relationship: tosca.relationships.libraryLinkage
          occurrences: [0, UNBOUNDED] 
    capabilities:
      callable:
        type: tosca.capabilities.Callable
    properties:
      abi:
        description: path to smart contract ABI
        type: string
        required: true
      privateKey:
        description: privateKey of the address that should perform the deploy
        type: string
        required: true
        default: {get_property: [SELF, wallet, privateKey]}
      owner:
        description: owner wallet address
        type: string
        required: false
        default: {get_property: [SELF, wallet, owner]}
      network:
        type: string
        required: true
        default: { get_property: [SELF, host, address] }
      parameters:
        type: list
        description: arguments to pass in smart contract constructor. The order must reflect the one in the contract signature.
        default: []
      destroy:
        type: string
        description: function to call for self destruct the contract
        required: false
        default: ""
      refund: 
        type: string
        description: address to refund for self destructing the contract
        required: false
        default: { get_property: [SELF, owner] }
    attributes:
      contractAddress: # set after playbook execution
        type: string
        description: 'Smart contract address when deployed'
      bytecode:
        type: string
        description: 'contract bytecode'
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
            outputs:
              contract_bytecode: [SELF, bytecode]
            implementation:
              primary: playbooks/load_bytecode.yml
              dependencies:
                - scripts/
                - contracts/
          configure:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              bytecode: { type: string, default: {get_attribute: [SELF, bytecode]}}
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              contract_parameters:
                { type: list, default: { get_property: [SELF, parameters] } }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/deploy_contract.yml
              dependencies:
                - scripts/
                - contracts/
          delete:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              network:
                { type: string, default: { get_property: [SELF, network] } }
              address:
                { type: string, default: { get_attribute: [SELF, contractAddress] } }
              destroy_function:
                { type: string, default: { get_property: [SELF, destroy] } }
              refund:
                { type: string, default: { get_property: [SELF, refund] } }
            implementation:
              primary: playbooks/delete_contract.yml
              dependencies:
                - scripts/
                - contracts/
  toscachain.nodes.diamond:
    derived_from: toscachain.nodes.contract
    requirements:
      - facet:
          capability: tosca.capabilities.Facet
          relationship: tosca.relationships.facet
          occurrences: [0, UNBOUNDED]
      - cut:
          capability: tosca.capabilities.Callable
          relationship: tosca.relationships.callsConstructor
          occurrences: [1, 1]
      - loupe:
          capability: tosca.capabilities.Callable
          relationship: tosca.relationships.callsConstructor
          occurrences: [1, 1]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          configure:
            inputs:
              abi: { type: string, default: { get_property: [SELF, abi] } }
              privateKey:
                { type: string, default: { get_property: [SELF, privateKey] } }
              owner:
                { type: string, default: { get_property: [SELF, owner]}}
              network:
                { type: string, default: { get_property: [SELF, network] } }
              bytecode: { type: string, default: {get_attribute: [SELF, bytecode]}}
              cutAbi:
                { type: string, default: { get_property: [SELF, cut, abi] } }
              cutAddress:
                {
                  type: string,
                  default: { get_attribute: [SELF, cut, contractAddress] },
                }
              loupeAbi:
                { type: string, default: { get_property: [SELF, loupe, abi] } }
              loupeAddress:
                {
                  type: string,
                  default: { get_attribute: [SELF, loupe, contractAddress] },
                }
            outputs:
              contract_address: [SELF, contractAddress]
            implementation:
              primary: playbooks/diamond_contract_deploy.yml
              dependencies:
                - scripts/
                - contracts/
  toscachain.nodes.diamond.facet:
    derived_from: toscachain.nodes.contract
    capabilities:
      facet:
        type: tosca.capabilities.Facet
    # properties:
      # functions:
      #   type: list
      #   description: functions to include in facet
      #   required: true
      #   default: []

