/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PoolOrders {
  export type PropertyStruct = {
    propertyValidator: AddressLike;
    propertyData: BytesLike;
  };

  export type PropertyStructOutput = [
    propertyValidator: string,
    propertyData: string
  ] & { propertyValidator: string; propertyData: string };

  export type OrderStruct = {
    direction: BigNumberish;
    maker: AddressLike;
    orderExpiry: BigNumberish;
    nonce: BigNumberish;
    size: BigNumberish;
    optionType: BigNumberish;
    maxStrikePriceMultiple: BigNumberish;
    minOptionDuration: BigNumberish;
    maxOptionDuration: BigNumberish;
    maxPriceSignalAge: BigNumberish;
    nftProperties: PoolOrders.PropertyStruct[];
    optionMarketAddress: AddressLike;
    impliedVolBips: BigNumberish;
    skewDecimal: BigNumberish;
    riskFreeRateBips: BigNumberish;
  };

  export type OrderStructOutput = [
    direction: bigint,
    maker: string,
    orderExpiry: bigint,
    nonce: bigint,
    size: bigint,
    optionType: bigint,
    maxStrikePriceMultiple: bigint,
    minOptionDuration: bigint,
    maxOptionDuration: bigint,
    maxPriceSignalAge: bigint,
    nftProperties: PoolOrders.PropertyStructOutput[],
    optionMarketAddress: string,
    impliedVolBips: bigint,
    skewDecimal: bigint,
    riskFreeRateBips: bigint
  ] & {
    direction: bigint;
    maker: string;
    orderExpiry: bigint;
    nonce: bigint;
    size: bigint;
    optionType: bigint;
    maxStrikePriceMultiple: bigint;
    minOptionDuration: bigint;
    maxOptionDuration: bigint;
    maxPriceSignalAge: bigint;
    nftProperties: PoolOrders.PropertyStructOutput[];
    optionMarketAddress: string;
    impliedVolBips: bigint;
    skewDecimal: bigint;
    riskFreeRateBips: bigint;
  };
}

export declare namespace HookBidPool {
  export type AssetPriceClaimStruct = {
    assetPriceInWei: BigNumberish;
    priceObservedTimestamp: BigNumberish;
    goodTilTimestamp: BigNumberish;
    signature: BytesLike;
  };

  export type AssetPriceClaimStructOutput = [
    assetPriceInWei: bigint,
    priceObservedTimestamp: bigint,
    goodTilTimestamp: bigint,
    signature: string
  ] & {
    assetPriceInWei: bigint;
    priceObservedTimestamp: bigint;
    goodTilTimestamp: bigint;
    signature: string;
  };

  export type OrderValidityOracleClaimStruct = {
    orderHash: BytesLike;
    goodTilTimestamp: BigNumberish;
    signature: BytesLike;
  };

  export type OrderValidityOracleClaimStructOutput = [
    orderHash: string,
    goodTilTimestamp: bigint,
    signature: string
  ] & { orderHash: string; goodTilTimestamp: bigint; signature: string };
}

export interface HookBidPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "FEES_ROLE"
      | "ORACLE_ROLE"
      | "PAUSER_ROLE"
      | "PROTOCOL_ROLE"
      | "cancelOrder"
      | "eip712Domain"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "renounceRole"
      | "revokeRole"
      | "sellOption"
      | "setFeeBips"
      | "setFeeRecipient"
      | "setOrderValidityOracleSigner"
      | "setPoolPaused"
      | "setPriceOracleSigner"
      | "setProtocol"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "FeesUpdated"
      | "OrderCancelled"
      | "OrderFilled"
      | "OrderValidityOracleSignerUpdated"
      | "PauseUpdated"
      | "PriceOracleSignerUpdated"
      | "ProtocolAddressSet"
      | "ProtocolFeeRecipientUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEES_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PoolOrders.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellOption",
    values: [
      PoolOrders.OrderStruct,
      BytesLike,
      HookBidPool.AssetPriceClaimStruct,
      HookBidPool.OrderValidityOracleClaimStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderValidityOracleSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracleSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocol",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEES_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellOption", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeBips", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderValidityOracleSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracleSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [feeBips: BigNumberish];
  export type OutputTuple = [feeBips: bigint];
  export interface OutputObject {
    feeBips: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCancelledEvent {
  export type InputTuple = [maker: AddressLike, orderHash: BytesLike];
  export type OutputTuple = [maker: string, orderHash: string];
  export interface OutputObject {
    maker: string;
    orderHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    maker: AddressLike,
    taker: AddressLike,
    orderHash: BytesLike,
    proceeds: BigNumberish,
    fees: BigNumberish,
    optionContract: AddressLike,
    optionId: BigNumberish
  ];
  export type OutputTuple = [
    maker: string,
    taker: string,
    orderHash: string,
    proceeds: bigint,
    fees: bigint,
    optionContract: string,
    optionId: bigint
  ];
  export interface OutputObject {
    maker: string;
    taker: string;
    orderHash: string;
    proceeds: bigint;
    fees: bigint;
    optionContract: string;
    optionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderValidityOracleSignerUpdatedEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseUpdatedEvent {
  export type InputTuple = [newState: boolean];
  export type OutputTuple = [newState: boolean];
  export interface OutputObject {
    newState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceOracleSignerUpdatedEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolAddressSetEvent {
  export type InputTuple = [protocol: AddressLike];
  export type OutputTuple = [protocol: string];
  export interface OutputObject {
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeRecipientUpdatedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HookBidPool extends BaseContract {
  connect(runner?: ContractRunner | null): HookBidPool;
  waitForDeployment(): Promise<this>;

  interface: HookBidPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEES_ROLE: TypedContractMethod<[], [string], "view">;

  ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  PROTOCOL_ROLE: TypedContractMethod<[], [string], "view">;

  cancelOrder: TypedContractMethod<
    [order: PoolOrders.OrderStruct],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sellOption: TypedContractMethod<
    [
      order: PoolOrders.OrderStruct,
      orderSignature: BytesLike,
      assetPrice: HookBidPool.AssetPriceClaimStruct,
      orderValidityOracleClaim: HookBidPool.OrderValidityOracleClaimStruct,
      saleProceeds: BigNumberish,
      optionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setFeeBips: TypedContractMethod<
    [_feeBips: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [_feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setOrderValidityOracleSigner: TypedContractMethod<
    [_orderValidityOracleSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setPriceOracleSigner: TypedContractMethod<
    [_priceOracleSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocol: TypedContractMethod<
    [_protocol: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEES_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROTOCOL_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<[order: PoolOrders.OrderStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellOption"
  ): TypedContractMethod<
    [
      order: PoolOrders.OrderStruct,
      orderSignature: BytesLike,
      assetPrice: HookBidPool.AssetPriceClaimStruct,
      orderValidityOracleClaim: HookBidPool.OrderValidityOracleClaimStruct,
      saleProceeds: BigNumberish,
      optionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeBips"
  ): TypedContractMethod<[_feeBips: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[_feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOrderValidityOracleSigner"
  ): TypedContractMethod<
    [_orderValidityOracleSigner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceOracleSigner"
  ): TypedContractMethod<
    [_priceOracleSigner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocol"
  ): TypedContractMethod<[_protocol: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCancelled"
  ): TypedContractEvent<
    OrderCancelledEvent.InputTuple,
    OrderCancelledEvent.OutputTuple,
    OrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;
  getEvent(
    key: "OrderValidityOracleSignerUpdated"
  ): TypedContractEvent<
    OrderValidityOracleSignerUpdatedEvent.InputTuple,
    OrderValidityOracleSignerUpdatedEvent.OutputTuple,
    OrderValidityOracleSignerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PauseUpdated"
  ): TypedContractEvent<
    PauseUpdatedEvent.InputTuple,
    PauseUpdatedEvent.OutputTuple,
    PauseUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceOracleSignerUpdated"
  ): TypedContractEvent<
    PriceOracleSignerUpdatedEvent.InputTuple,
    PriceOracleSignerUpdatedEvent.OutputTuple,
    PriceOracleSignerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolAddressSet"
  ): TypedContractEvent<
    ProtocolAddressSetEvent.InputTuple,
    ProtocolAddressSetEvent.OutputTuple,
    ProtocolAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeRecipientUpdated"
  ): TypedContractEvent<
    ProtocolFeeRecipientUpdatedEvent.InputTuple,
    ProtocolFeeRecipientUpdatedEvent.OutputTuple,
    ProtocolFeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "FeesUpdated(uint64)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "OrderCancelled(address,bytes32)": TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;
    OrderCancelled: TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;

    "OrderFilled(address,address,bytes32,uint256,uint256,address,uint256)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;

    "OrderValidityOracleSignerUpdated(address)": TypedContractEvent<
      OrderValidityOracleSignerUpdatedEvent.InputTuple,
      OrderValidityOracleSignerUpdatedEvent.OutputTuple,
      OrderValidityOracleSignerUpdatedEvent.OutputObject
    >;
    OrderValidityOracleSignerUpdated: TypedContractEvent<
      OrderValidityOracleSignerUpdatedEvent.InputTuple,
      OrderValidityOracleSignerUpdatedEvent.OutputTuple,
      OrderValidityOracleSignerUpdatedEvent.OutputObject
    >;

    "PauseUpdated(bool)": TypedContractEvent<
      PauseUpdatedEvent.InputTuple,
      PauseUpdatedEvent.OutputTuple,
      PauseUpdatedEvent.OutputObject
    >;
    PauseUpdated: TypedContractEvent<
      PauseUpdatedEvent.InputTuple,
      PauseUpdatedEvent.OutputTuple,
      PauseUpdatedEvent.OutputObject
    >;

    "PriceOracleSignerUpdated(address)": TypedContractEvent<
      PriceOracleSignerUpdatedEvent.InputTuple,
      PriceOracleSignerUpdatedEvent.OutputTuple,
      PriceOracleSignerUpdatedEvent.OutputObject
    >;
    PriceOracleSignerUpdated: TypedContractEvent<
      PriceOracleSignerUpdatedEvent.InputTuple,
      PriceOracleSignerUpdatedEvent.OutputTuple,
      PriceOracleSignerUpdatedEvent.OutputObject
    >;

    "ProtocolAddressSet(address)": TypedContractEvent<
      ProtocolAddressSetEvent.InputTuple,
      ProtocolAddressSetEvent.OutputTuple,
      ProtocolAddressSetEvent.OutputObject
    >;
    ProtocolAddressSet: TypedContractEvent<
      ProtocolAddressSetEvent.InputTuple,
      ProtocolAddressSetEvent.OutputTuple,
      ProtocolAddressSetEvent.OutputObject
    >;

    "ProtocolFeeRecipientUpdated(address)": TypedContractEvent<
      ProtocolFeeRecipientUpdatedEvent.InputTuple,
      ProtocolFeeRecipientUpdatedEvent.OutputTuple,
      ProtocolFeeRecipientUpdatedEvent.OutputObject
    >;
    ProtocolFeeRecipientUpdated: TypedContractEvent<
      ProtocolFeeRecipientUpdatedEvent.InputTuple,
      ProtocolFeeRecipientUpdatedEvent.OutputTuple,
      ProtocolFeeRecipientUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
