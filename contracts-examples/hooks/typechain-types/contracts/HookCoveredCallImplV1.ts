/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Signatures {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [
    signatureType: bigint,
    v: bigint,
    r: string,
    s: string
  ] & { signatureType: bigint; v: bigint; r: string; s: string };
}

export interface HookCoveredCallImplV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALLOWLISTER_ROLE"
      | "CALL_UPGRADER"
      | "COLLECTION_CONF"
      | "MARKET_CONF"
      | "PAUSER_ROLE"
      | "VAULT_UPGRADER"
      | "_preApprovedMarketplace"
      | "allowedUnderlyingAddress"
      | "approve"
      | "assetOptions"
      | "balanceOf"
      | "bid"
      | "burn"
      | "burnExpiredOption"
      | "claimOptionProceeds"
      | "contractUri"
      | "currentBid"
      | "currentBidder"
      | "getApproved"
      | "getAssetId"
      | "getExpiration"
      | "getOptionIdForAsset"
      | "getStrikePrice"
      | "getTransferCount"
      | "getVaultAddress"
      | "initialize"
      | "isApprovedForAll"
      | "marketPaused"
      | "minBidIncrementBips"
      | "minimumOptionDuration"
      | "mintWithEntitledVault"
      | "mintWithErc721"
      | "mintWithVault"
      | "name"
      | "optionClaims"
      | "optionParams"
      | "ownerOf"
      | "reclaimAsset"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBidIncrement"
      | "setMarketPaused"
      | "setMinOptionDuration"
      | "setSettlementAuctionStartOffset"
      | "settleOption"
      | "settlementAuctionStartOffset"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "weth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Bid"
      | "CallCreated"
      | "CallProceedsDistributed"
      | "CallReclaimed"
      | "CallSettled"
      | "ExpiredCallBurned"
      | "Initialized"
      | "MarketPauseUpdated"
      | "MinBidIncrementUpdated"
      | "MinOptionDurationUpdated"
      | "SettlementAuctionStartOffsetUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ALLOWLISTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CALL_UPGRADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COLLECTION_CONF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_CONF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_UPGRADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_preApprovedMarketplace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedUnderlyingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetOptions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnExpiredOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOptionProceeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBidder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionIdForAsset",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrikePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidIncrementBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumOptionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithEntitledVault",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithErc721",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithVault",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Signatures.SignatureStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optionClaims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optionParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimAsset",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBidIncrement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinOptionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementAuctionStartOffset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementAuctionStartOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ALLOWLISTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CALL_UPGRADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COLLECTION_CONF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_CONF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_UPGRADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_preApprovedMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedUnderlyingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnExpiredOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOptionProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAssetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionIdForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidIncrementBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumOptionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithEntitledVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithErc721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBidIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinOptionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementAuctionStartOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementAuctionStartOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidEvent {
  export type InputTuple = [
    optionId: BigNumberish,
    bidAmount: BigNumberish,
    bidder: AddressLike
  ];
  export type OutputTuple = [
    optionId: bigint,
    bidAmount: bigint,
    bidder: string
  ];
  export interface OutputObject {
    optionId: bigint;
    bidAmount: bigint;
    bidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallCreatedEvent {
  export type InputTuple = [
    writer: AddressLike,
    vaultAddress: AddressLike,
    assetId: BigNumberish,
    optionId: BigNumberish,
    strikePrice: BigNumberish,
    expiration: BigNumberish
  ];
  export type OutputTuple = [
    writer: string,
    vaultAddress: string,
    assetId: bigint,
    optionId: bigint,
    strikePrice: bigint,
    expiration: bigint
  ];
  export interface OutputObject {
    writer: string;
    vaultAddress: string;
    assetId: bigint;
    optionId: bigint;
    strikePrice: bigint;
    expiration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallProceedsDistributedEvent {
  export type InputTuple = [
    optionId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [optionId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    optionId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallReclaimedEvent {
  export type InputTuple = [optionId: BigNumberish];
  export type OutputTuple = [optionId: bigint];
  export interface OutputObject {
    optionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallSettledEvent {
  export type InputTuple = [optionId: BigNumberish, claimable: boolean];
  export type OutputTuple = [optionId: bigint, claimable: boolean];
  export interface OutputObject {
    optionId: bigint;
    claimable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpiredCallBurnedEvent {
  export type InputTuple = [optionId: BigNumberish];
  export type OutputTuple = [optionId: bigint];
  export interface OutputObject {
    optionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketPauseUpdatedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinBidIncrementUpdatedEvent {
  export type InputTuple = [bidIncrementBips: BigNumberish];
  export type OutputTuple = [bidIncrementBips: bigint];
  export interface OutputObject {
    bidIncrementBips: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinOptionDurationUpdatedEvent {
  export type InputTuple = [optionDuration: BigNumberish];
  export type OutputTuple = [optionDuration: bigint];
  export interface OutputObject {
    optionDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementAuctionStartOffsetUpdatedEvent {
  export type InputTuple = [startOffset: BigNumberish];
  export type OutputTuple = [startOffset: bigint];
  export interface OutputObject {
    startOffset: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HookCoveredCallImplV1 extends BaseContract {
  connect(runner?: ContractRunner | null): HookCoveredCallImplV1;
  waitForDeployment(): Promise<this>;

  interface: HookCoveredCallImplV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALLOWLISTER_ROLE: TypedContractMethod<[], [string], "view">;

  CALL_UPGRADER: TypedContractMethod<[], [string], "view">;

  COLLECTION_CONF: TypedContractMethod<[], [string], "view">;

  MARKET_CONF: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  VAULT_UPGRADER: TypedContractMethod<[], [string], "view">;

  _preApprovedMarketplace: TypedContractMethod<[], [string], "view">;

  allowedUnderlyingAddress: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  assetOptions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  bid: TypedContractMethod<[optionId: BigNumberish], [void], "payable">;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  burnExpiredOption: TypedContractMethod<
    [optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimOptionProceeds: TypedContractMethod<
    [optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  contractUri: TypedContractMethod<[optionId: BigNumberish], [string], "view">;

  currentBid: TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;

  currentBidder: TypedContractMethod<
    [optionId: BigNumberish],
    [string],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getAssetId: TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;

  getExpiration: TypedContractMethod<
    [optionId: BigNumberish],
    [bigint],
    "view"
  >;

  getOptionIdForAsset: TypedContractMethod<
    [vault: AddressLike, assetId: BigNumberish],
    [bigint],
    "view"
  >;

  getStrikePrice: TypedContractMethod<
    [optionId: BigNumberish],
    [bigint],
    "view"
  >;

  getTransferCount: TypedContractMethod<
    [optionId: BigNumberish],
    [bigint],
    "view"
  >;

  getVaultAddress: TypedContractMethod<
    [optionId: BigNumberish],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      protocol: AddressLike,
      nftContract: AddressLike,
      hookVaultFactory: AddressLike,
      preApprovedMarketplace: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  marketPaused: TypedContractMethod<[], [boolean], "view">;

  minBidIncrementBips: TypedContractMethod<[], [bigint], "view">;

  minimumOptionDuration: TypedContractMethod<[], [bigint], "view">;

  mintWithEntitledVault: TypedContractMethod<
    [
      vaultAddress: AddressLike,
      assetId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mintWithErc721: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mintWithVault: TypedContractMethod<
    [
      vaultAddress: AddressLike,
      assetId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish,
      signature: Signatures.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  optionClaims: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  optionParams: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, bigint, bigint, string, boolean] & {
        writer: string;
        expiration: bigint;
        assetId: bigint;
        vaultAddress: string;
        strike: bigint;
        bid: bigint;
        highBidder: string;
        settled: boolean;
      }
    ],
    "view"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  reclaimAsset: TypedContractMethod<
    [optionId: BigNumberish, returnNft: boolean],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBidIncrement: TypedContractMethod<
    [newBidIncrement: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarketPaused: TypedContractMethod<[paused: boolean], [void], "nonpayable">;

  setMinOptionDuration: TypedContractMethod<
    [newMinDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSettlementAuctionStartOffset: TypedContractMethod<
    [newSettlementStartOffset: BigNumberish],
    [void],
    "nonpayable"
  >;

  settleOption: TypedContractMethod<
    [optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  settlementAuctionStartOffset: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALLOWLISTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CALL_UPGRADER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COLLECTION_CONF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MARKET_CONF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VAULT_UPGRADER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_preApprovedMarketplace"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowedUnderlyingAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetOptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<[optionId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnExpiredOption"
  ): TypedContractMethod<[optionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimOptionProceeds"
  ): TypedContractMethod<[optionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contractUri"
  ): TypedContractMethod<[optionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "currentBid"
  ): TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentBidder"
  ): TypedContractMethod<[optionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAssetId"
  ): TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpiration"
  ): TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOptionIdForAsset"
  ): TypedContractMethod<
    [vault: AddressLike, assetId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStrikePrice"
  ): TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransferCount"
  ): TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultAddress"
  ): TypedContractMethod<[optionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      protocol: AddressLike,
      nftContract: AddressLike,
      hookVaultFactory: AddressLike,
      preApprovedMarketplace: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "minBidIncrementBips"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumOptionDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintWithEntitledVault"
  ): TypedContractMethod<
    [
      vaultAddress: AddressLike,
      assetId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithErc721"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithVault"
  ): TypedContractMethod<
    [
      vaultAddress: AddressLike,
      assetId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish,
      signature: Signatures.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "optionClaims"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "optionParams"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, bigint, bigint, string, boolean] & {
        writer: string;
        expiration: bigint;
        assetId: bigint;
        vaultAddress: string;
        strike: bigint;
        bid: bigint;
        highBidder: string;
        settled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "reclaimAsset"
  ): TypedContractMethod<
    [optionId: BigNumberish, returnNft: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBidIncrement"
  ): TypedContractMethod<[newBidIncrement: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketPaused"
  ): TypedContractMethod<[paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinOptionDuration"
  ): TypedContractMethod<[newMinDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSettlementAuctionStartOffset"
  ): TypedContractMethod<
    [newSettlementStartOffset: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleOption"
  ): TypedContractMethod<[optionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlementAuctionStartOffset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Bid"
  ): TypedContractEvent<
    BidEvent.InputTuple,
    BidEvent.OutputTuple,
    BidEvent.OutputObject
  >;
  getEvent(
    key: "CallCreated"
  ): TypedContractEvent<
    CallCreatedEvent.InputTuple,
    CallCreatedEvent.OutputTuple,
    CallCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CallProceedsDistributed"
  ): TypedContractEvent<
    CallProceedsDistributedEvent.InputTuple,
    CallProceedsDistributedEvent.OutputTuple,
    CallProceedsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "CallReclaimed"
  ): TypedContractEvent<
    CallReclaimedEvent.InputTuple,
    CallReclaimedEvent.OutputTuple,
    CallReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "CallSettled"
  ): TypedContractEvent<
    CallSettledEvent.InputTuple,
    CallSettledEvent.OutputTuple,
    CallSettledEvent.OutputObject
  >;
  getEvent(
    key: "ExpiredCallBurned"
  ): TypedContractEvent<
    ExpiredCallBurnedEvent.InputTuple,
    ExpiredCallBurnedEvent.OutputTuple,
    ExpiredCallBurnedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MarketPauseUpdated"
  ): TypedContractEvent<
    MarketPauseUpdatedEvent.InputTuple,
    MarketPauseUpdatedEvent.OutputTuple,
    MarketPauseUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinBidIncrementUpdated"
  ): TypedContractEvent<
    MinBidIncrementUpdatedEvent.InputTuple,
    MinBidIncrementUpdatedEvent.OutputTuple,
    MinBidIncrementUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinOptionDurationUpdated"
  ): TypedContractEvent<
    MinOptionDurationUpdatedEvent.InputTuple,
    MinOptionDurationUpdatedEvent.OutputTuple,
    MinOptionDurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementAuctionStartOffsetUpdated"
  ): TypedContractEvent<
    SettlementAuctionStartOffsetUpdatedEvent.InputTuple,
    SettlementAuctionStartOffsetUpdatedEvent.OutputTuple,
    SettlementAuctionStartOffsetUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Bid(uint256,uint256,address)": TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;
    Bid: TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;

    "CallCreated(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CallCreatedEvent.InputTuple,
      CallCreatedEvent.OutputTuple,
      CallCreatedEvent.OutputObject
    >;
    CallCreated: TypedContractEvent<
      CallCreatedEvent.InputTuple,
      CallCreatedEvent.OutputTuple,
      CallCreatedEvent.OutputObject
    >;

    "CallProceedsDistributed(uint256,address,uint256)": TypedContractEvent<
      CallProceedsDistributedEvent.InputTuple,
      CallProceedsDistributedEvent.OutputTuple,
      CallProceedsDistributedEvent.OutputObject
    >;
    CallProceedsDistributed: TypedContractEvent<
      CallProceedsDistributedEvent.InputTuple,
      CallProceedsDistributedEvent.OutputTuple,
      CallProceedsDistributedEvent.OutputObject
    >;

    "CallReclaimed(uint256)": TypedContractEvent<
      CallReclaimedEvent.InputTuple,
      CallReclaimedEvent.OutputTuple,
      CallReclaimedEvent.OutputObject
    >;
    CallReclaimed: TypedContractEvent<
      CallReclaimedEvent.InputTuple,
      CallReclaimedEvent.OutputTuple,
      CallReclaimedEvent.OutputObject
    >;

    "CallSettled(uint256,bool)": TypedContractEvent<
      CallSettledEvent.InputTuple,
      CallSettledEvent.OutputTuple,
      CallSettledEvent.OutputObject
    >;
    CallSettled: TypedContractEvent<
      CallSettledEvent.InputTuple,
      CallSettledEvent.OutputTuple,
      CallSettledEvent.OutputObject
    >;

    "ExpiredCallBurned(uint256)": TypedContractEvent<
      ExpiredCallBurnedEvent.InputTuple,
      ExpiredCallBurnedEvent.OutputTuple,
      ExpiredCallBurnedEvent.OutputObject
    >;
    ExpiredCallBurned: TypedContractEvent<
      ExpiredCallBurnedEvent.InputTuple,
      ExpiredCallBurnedEvent.OutputTuple,
      ExpiredCallBurnedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MarketPauseUpdated(bool)": TypedContractEvent<
      MarketPauseUpdatedEvent.InputTuple,
      MarketPauseUpdatedEvent.OutputTuple,
      MarketPauseUpdatedEvent.OutputObject
    >;
    MarketPauseUpdated: TypedContractEvent<
      MarketPauseUpdatedEvent.InputTuple,
      MarketPauseUpdatedEvent.OutputTuple,
      MarketPauseUpdatedEvent.OutputObject
    >;

    "MinBidIncrementUpdated(uint256)": TypedContractEvent<
      MinBidIncrementUpdatedEvent.InputTuple,
      MinBidIncrementUpdatedEvent.OutputTuple,
      MinBidIncrementUpdatedEvent.OutputObject
    >;
    MinBidIncrementUpdated: TypedContractEvent<
      MinBidIncrementUpdatedEvent.InputTuple,
      MinBidIncrementUpdatedEvent.OutputTuple,
      MinBidIncrementUpdatedEvent.OutputObject
    >;

    "MinOptionDurationUpdated(uint256)": TypedContractEvent<
      MinOptionDurationUpdatedEvent.InputTuple,
      MinOptionDurationUpdatedEvent.OutputTuple,
      MinOptionDurationUpdatedEvent.OutputObject
    >;
    MinOptionDurationUpdated: TypedContractEvent<
      MinOptionDurationUpdatedEvent.InputTuple,
      MinOptionDurationUpdatedEvent.OutputTuple,
      MinOptionDurationUpdatedEvent.OutputObject
    >;

    "SettlementAuctionStartOffsetUpdated(uint256)": TypedContractEvent<
      SettlementAuctionStartOffsetUpdatedEvent.InputTuple,
      SettlementAuctionStartOffsetUpdatedEvent.OutputTuple,
      SettlementAuctionStartOffsetUpdatedEvent.OutputObject
    >;
    SettlementAuctionStartOffsetUpdated: TypedContractEvent<
      SettlementAuctionStartOffsetUpdatedEvent.InputTuple,
      SettlementAuctionStartOffsetUpdatedEvent.OutputTuple,
      SettlementAuctionStartOffsetUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
