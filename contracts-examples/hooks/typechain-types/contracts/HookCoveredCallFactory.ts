/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HookCoveredCallFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALLOWLISTER_ROLE"
      | "CALL_UPGRADER"
      | "COLLECTION_CONF"
      | "MARKET_CONF"
      | "PAUSER_ROLE"
      | "VAULT_UPGRADER"
      | "getCallInstrument"
      | "makeCallInstrument"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CoveredCallInstrumentCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ALLOWLISTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CALL_UPGRADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COLLECTION_CONF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_CONF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_UPGRADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCallInstrument",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCallInstrument",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ALLOWLISTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CALL_UPGRADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COLLECTION_CONF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_CONF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_UPGRADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCallInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeCallInstrument",
    data: BytesLike
  ): Result;
}

export namespace CoveredCallInstrumentCreatedEvent {
  export type InputTuple = [
    assetAddress: AddressLike,
    instrumentAddress: AddressLike
  ];
  export type OutputTuple = [assetAddress: string, instrumentAddress: string];
  export interface OutputObject {
    assetAddress: string;
    instrumentAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HookCoveredCallFactory extends BaseContract {
  connect(runner?: ContractRunner | null): HookCoveredCallFactory;
  waitForDeployment(): Promise<this>;

  interface: HookCoveredCallFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALLOWLISTER_ROLE: TypedContractMethod<[], [string], "view">;

  CALL_UPGRADER: TypedContractMethod<[], [string], "view">;

  COLLECTION_CONF: TypedContractMethod<[], [string], "view">;

  MARKET_CONF: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  VAULT_UPGRADER: TypedContractMethod<[], [string], "view">;

  getCallInstrument: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  makeCallInstrument: TypedContractMethod<
    [assetAddress: AddressLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALLOWLISTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CALL_UPGRADER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COLLECTION_CONF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MARKET_CONF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VAULT_UPGRADER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCallInstrument"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "makeCallInstrument"
  ): TypedContractMethod<[assetAddress: AddressLike], [string], "nonpayable">;

  getEvent(
    key: "CoveredCallInstrumentCreated"
  ): TypedContractEvent<
    CoveredCallInstrumentCreatedEvent.InputTuple,
    CoveredCallInstrumentCreatedEvent.OutputTuple,
    CoveredCallInstrumentCreatedEvent.OutputObject
  >;

  filters: {
    "CoveredCallInstrumentCreated(address,address)": TypedContractEvent<
      CoveredCallInstrumentCreatedEvent.InputTuple,
      CoveredCallInstrumentCreatedEvent.OutputTuple,
      CoveredCallInstrumentCreatedEvent.OutputObject
    >;
    CoveredCallInstrumentCreated: TypedContractEvent<
      CoveredCallInstrumentCreatedEvent.InputTuple,
      CoveredCallInstrumentCreatedEvent.OutputTuple,
      CoveredCallInstrumentCreatedEvent.OutputObject
    >;
  };
}
