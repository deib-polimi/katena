/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HookERC721VaultFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALLOWLISTER_ROLE"
      | "CALL_UPGRADER"
      | "COLLECTION_CONF"
      | "MARKET_CONF"
      | "PAUSER_ROLE"
      | "VAULT_UPGRADER"
      | "findOrCreateVault"
      | "getMultiVault"
      | "getVault"
      | "makeMultiVault"
      | "makeSoloVault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ERC721MultiVaultCreated" | "ERC721VaultCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ALLOWLISTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CALL_UPGRADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COLLECTION_CONF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_CONF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_UPGRADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findOrCreateVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeMultiVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSoloVault",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ALLOWLISTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CALL_UPGRADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COLLECTION_CONF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_CONF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_UPGRADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOrCreateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeMultiVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeSoloVault",
    data: BytesLike
  ): Result;
}

export namespace ERC721MultiVaultCreatedEvent {
  export type InputTuple = [nftAddress: AddressLike, vaultAddress: AddressLike];
  export type OutputTuple = [nftAddress: string, vaultAddress: string];
  export interface OutputObject {
    nftAddress: string;
    vaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC721VaultCreatedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    vaultAddress: AddressLike
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    vaultAddress: string
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    vaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HookERC721VaultFactory extends BaseContract {
  connect(runner?: ContractRunner | null): HookERC721VaultFactory;
  waitForDeployment(): Promise<this>;

  interface: HookERC721VaultFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALLOWLISTER_ROLE: TypedContractMethod<[], [string], "view">;

  CALL_UPGRADER: TypedContractMethod<[], [string], "view">;

  COLLECTION_CONF: TypedContractMethod<[], [string], "view">;

  MARKET_CONF: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  VAULT_UPGRADER: TypedContractMethod<[], [string], "view">;

  findOrCreateVault: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [string],
    "nonpayable"
  >;

  getMultiVault: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getVault: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  makeMultiVault: TypedContractMethod<
    [nftAddress: AddressLike],
    [string],
    "nonpayable"
  >;

  makeSoloVault: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALLOWLISTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CALL_UPGRADER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COLLECTION_CONF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MARKET_CONF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VAULT_UPGRADER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "findOrCreateVault"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMultiVault"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeMultiVault"
  ): TypedContractMethod<[nftAddress: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "makeSoloVault"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "ERC721MultiVaultCreated"
  ): TypedContractEvent<
    ERC721MultiVaultCreatedEvent.InputTuple,
    ERC721MultiVaultCreatedEvent.OutputTuple,
    ERC721MultiVaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ERC721VaultCreated"
  ): TypedContractEvent<
    ERC721VaultCreatedEvent.InputTuple,
    ERC721VaultCreatedEvent.OutputTuple,
    ERC721VaultCreatedEvent.OutputObject
  >;

  filters: {
    "ERC721MultiVaultCreated(address,address)": TypedContractEvent<
      ERC721MultiVaultCreatedEvent.InputTuple,
      ERC721MultiVaultCreatedEvent.OutputTuple,
      ERC721MultiVaultCreatedEvent.OutputObject
    >;
    ERC721MultiVaultCreated: TypedContractEvent<
      ERC721MultiVaultCreatedEvent.InputTuple,
      ERC721MultiVaultCreatedEvent.OutputTuple,
      ERC721MultiVaultCreatedEvent.OutputObject
    >;

    "ERC721VaultCreated(address,uint256,address)": TypedContractEvent<
      ERC721VaultCreatedEvent.InputTuple,
      ERC721VaultCreatedEvent.OutputTuple,
      ERC721VaultCreatedEvent.OutputObject
    >;
    ERC721VaultCreated: TypedContractEvent<
      ERC721VaultCreatedEvent.InputTuple,
      ERC721VaultCreatedEvent.OutputTuple,
      ERC721VaultCreatedEvent.OutputObject
    >;
  };
}
