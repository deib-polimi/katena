/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDelegationRegistry {
  export type ContractDelegationStruct = {
    contract_: AddressLike;
    delegate: AddressLike;
  };

  export type ContractDelegationStructOutput = [
    contract_: string,
    delegate: string
  ] & { contract_: string; delegate: string };

  export type DelegationInfoStruct = {
    type_: BigNumberish;
    vault: AddressLike;
    delegate: AddressLike;
    contract_: AddressLike;
    tokenId: BigNumberish;
  };

  export type DelegationInfoStructOutput = [
    type_: bigint,
    vault: string,
    delegate: string,
    contract_: string,
    tokenId: bigint
  ] & {
    type_: bigint;
    vault: string;
    delegate: string;
    contract_: string;
    tokenId: bigint;
  };

  export type TokenDelegationStruct = {
    contract_: AddressLike;
    tokenId: BigNumberish;
    delegate: AddressLike;
  };

  export type TokenDelegationStructOutput = [
    contract_: string,
    tokenId: bigint,
    delegate: string
  ] & { contract_: string; tokenId: bigint; delegate: string };
}

export interface IDelegationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkDelegateForAll"
      | "checkDelegateForContract"
      | "checkDelegateForToken"
      | "delegateForAll"
      | "delegateForContract"
      | "delegateForToken"
      | "getContractLevelDelegations"
      | "getDelegatesForAll"
      | "getDelegatesForContract"
      | "getDelegatesForToken"
      | "getDelegationsByDelegate"
      | "getTokenLevelDelegations"
      | "revokeAllDelegates"
      | "revokeDelegate"
      | "revokeSelf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegateForAll"
      | "DelegateForContract"
      | "DelegateForToken"
      | "RevokeAllDelegates"
      | "RevokeDelegate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkDelegateForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDelegateForContract",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDelegateForToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateForContract",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateForToken",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractLevelDelegations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatesForAll",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatesForContract",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatesForToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationsByDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenLevelDelegations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllDelegates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSelf",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkDelegateForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDelegateForContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDelegateForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateForContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractLevelDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatesForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatesForContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatesForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationsByDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenLevelDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeSelf", data: BytesLike): Result;
}

export namespace DelegateForAllEvent {
  export type InputTuple = [
    vault: AddressLike,
    delegate: AddressLike,
    value: boolean
  ];
  export type OutputTuple = [vault: string, delegate: string, value: boolean];
  export interface OutputObject {
    vault: string;
    delegate: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateForContractEvent {
  export type InputTuple = [
    vault: AddressLike,
    delegate: AddressLike,
    contract_: AddressLike,
    value: boolean
  ];
  export type OutputTuple = [
    vault: string,
    delegate: string,
    contract_: string,
    value: boolean
  ];
  export interface OutputObject {
    vault: string;
    delegate: string;
    contract_: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateForTokenEvent {
  export type InputTuple = [
    vault: AddressLike,
    delegate: AddressLike,
    contract_: AddressLike,
    tokenId: BigNumberish,
    value: boolean
  ];
  export type OutputTuple = [
    vault: string,
    delegate: string,
    contract_: string,
    tokenId: bigint,
    value: boolean
  ];
  export interface OutputObject {
    vault: string;
    delegate: string;
    contract_: string;
    tokenId: bigint;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeAllDelegatesEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeDelegateEvent {
  export type InputTuple = [vault: AddressLike, delegate: AddressLike];
  export type OutputTuple = [vault: string, delegate: string];
  export interface OutputObject {
    vault: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDelegationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IDelegationRegistry;
  waitForDeployment(): Promise<this>;

  interface: IDelegationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkDelegateForAll: TypedContractMethod<
    [delegate: AddressLike, vault: AddressLike],
    [boolean],
    "view"
  >;

  checkDelegateForContract: TypedContractMethod<
    [delegate: AddressLike, vault: AddressLike, contract_: AddressLike],
    [boolean],
    "view"
  >;

  checkDelegateForToken: TypedContractMethod<
    [
      delegate: AddressLike,
      vault: AddressLike,
      contract_: AddressLike,
      tokenId: BigNumberish
    ],
    [boolean],
    "view"
  >;

  delegateForAll: TypedContractMethod<
    [delegate: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  delegateForContract: TypedContractMethod<
    [delegate: AddressLike, contract_: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  delegateForToken: TypedContractMethod<
    [
      delegate: AddressLike,
      contract_: AddressLike,
      tokenId: BigNumberish,
      value: boolean
    ],
    [void],
    "nonpayable"
  >;

  getContractLevelDelegations: TypedContractMethod<
    [vault: AddressLike],
    [IDelegationRegistry.ContractDelegationStructOutput[]],
    "view"
  >;

  getDelegatesForAll: TypedContractMethod<
    [vault: AddressLike],
    [string[]],
    "view"
  >;

  getDelegatesForContract: TypedContractMethod<
    [vault: AddressLike, contract_: AddressLike],
    [string[]],
    "view"
  >;

  getDelegatesForToken: TypedContractMethod<
    [vault: AddressLike, contract_: AddressLike, tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getDelegationsByDelegate: TypedContractMethod<
    [delegate: AddressLike],
    [IDelegationRegistry.DelegationInfoStructOutput[]],
    "view"
  >;

  getTokenLevelDelegations: TypedContractMethod<
    [vault: AddressLike],
    [IDelegationRegistry.TokenDelegationStructOutput[]],
    "view"
  >;

  revokeAllDelegates: TypedContractMethod<[], [void], "nonpayable">;

  revokeDelegate: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeSelf: TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkDelegateForAll"
  ): TypedContractMethod<
    [delegate: AddressLike, vault: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkDelegateForContract"
  ): TypedContractMethod<
    [delegate: AddressLike, vault: AddressLike, contract_: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkDelegateForToken"
  ): TypedContractMethod<
    [
      delegate: AddressLike,
      vault: AddressLike,
      contract_: AddressLike,
      tokenId: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegateForAll"
  ): TypedContractMethod<
    [delegate: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateForContract"
  ): TypedContractMethod<
    [delegate: AddressLike, contract_: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateForToken"
  ): TypedContractMethod<
    [
      delegate: AddressLike,
      contract_: AddressLike,
      tokenId: BigNumberish,
      value: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContractLevelDelegations"
  ): TypedContractMethod<
    [vault: AddressLike],
    [IDelegationRegistry.ContractDelegationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDelegatesForAll"
  ): TypedContractMethod<[vault: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDelegatesForContract"
  ): TypedContractMethod<
    [vault: AddressLike, contract_: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDelegatesForToken"
  ): TypedContractMethod<
    [vault: AddressLike, contract_: AddressLike, tokenId: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDelegationsByDelegate"
  ): TypedContractMethod<
    [delegate: AddressLike],
    [IDelegationRegistry.DelegationInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenLevelDelegations"
  ): TypedContractMethod<
    [vault: AddressLike],
    [IDelegationRegistry.TokenDelegationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeAllDelegates"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeDelegate"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeSelf"
  ): TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DelegateForAll"
  ): TypedContractEvent<
    DelegateForAllEvent.InputTuple,
    DelegateForAllEvent.OutputTuple,
    DelegateForAllEvent.OutputObject
  >;
  getEvent(
    key: "DelegateForContract"
  ): TypedContractEvent<
    DelegateForContractEvent.InputTuple,
    DelegateForContractEvent.OutputTuple,
    DelegateForContractEvent.OutputObject
  >;
  getEvent(
    key: "DelegateForToken"
  ): TypedContractEvent<
    DelegateForTokenEvent.InputTuple,
    DelegateForTokenEvent.OutputTuple,
    DelegateForTokenEvent.OutputObject
  >;
  getEvent(
    key: "RevokeAllDelegates"
  ): TypedContractEvent<
    RevokeAllDelegatesEvent.InputTuple,
    RevokeAllDelegatesEvent.OutputTuple,
    RevokeAllDelegatesEvent.OutputObject
  >;
  getEvent(
    key: "RevokeDelegate"
  ): TypedContractEvent<
    RevokeDelegateEvent.InputTuple,
    RevokeDelegateEvent.OutputTuple,
    RevokeDelegateEvent.OutputObject
  >;

  filters: {
    "DelegateForAll(address,address,bool)": TypedContractEvent<
      DelegateForAllEvent.InputTuple,
      DelegateForAllEvent.OutputTuple,
      DelegateForAllEvent.OutputObject
    >;
    DelegateForAll: TypedContractEvent<
      DelegateForAllEvent.InputTuple,
      DelegateForAllEvent.OutputTuple,
      DelegateForAllEvent.OutputObject
    >;

    "DelegateForContract(address,address,address,bool)": TypedContractEvent<
      DelegateForContractEvent.InputTuple,
      DelegateForContractEvent.OutputTuple,
      DelegateForContractEvent.OutputObject
    >;
    DelegateForContract: TypedContractEvent<
      DelegateForContractEvent.InputTuple,
      DelegateForContractEvent.OutputTuple,
      DelegateForContractEvent.OutputObject
    >;

    "DelegateForToken(address,address,address,uint256,bool)": TypedContractEvent<
      DelegateForTokenEvent.InputTuple,
      DelegateForTokenEvent.OutputTuple,
      DelegateForTokenEvent.OutputObject
    >;
    DelegateForToken: TypedContractEvent<
      DelegateForTokenEvent.InputTuple,
      DelegateForTokenEvent.OutputTuple,
      DelegateForTokenEvent.OutputObject
    >;

    "RevokeAllDelegates(address)": TypedContractEvent<
      RevokeAllDelegatesEvent.InputTuple,
      RevokeAllDelegatesEvent.OutputTuple,
      RevokeAllDelegatesEvent.OutputObject
    >;
    RevokeAllDelegates: TypedContractEvent<
      RevokeAllDelegatesEvent.InputTuple,
      RevokeAllDelegatesEvent.OutputTuple,
      RevokeAllDelegatesEvent.OutputObject
    >;

    "RevokeDelegate(address,address)": TypedContractEvent<
      RevokeDelegateEvent.InputTuple,
      RevokeDelegateEvent.OutputTuple,
      RevokeDelegateEvent.OutputObject
    >;
    RevokeDelegate: TypedContractEvent<
      RevokeDelegateEvent.InputTuple,
      RevokeDelegateEvent.OutputTuple,
      RevokeDelegateEvent.OutputObject
    >;
  };
}
