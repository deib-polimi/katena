/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Signatures {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [
    signatureType: bigint,
    v: bigint,
    r: string,
    s: string
  ] & { signatureType: bigint; v: bigint; r: string; s: string };
}

export interface IHookCoveredCallInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "bid"
      | "burnExpiredOption"
      | "claimOptionProceeds"
      | "currentBid"
      | "currentBidder"
      | "getApproved"
      | "getOptionIdForAsset"
      | "isApprovedForAll"
      | "mintWithEntitledVault"
      | "mintWithErc721"
      | "mintWithVault"
      | "name"
      | "ownerOf"
      | "reclaimAsset"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "settleOption"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Bid"
      | "CallCreated"
      | "CallProceedsDistributed"
      | "CallReclaimed"
      | "CallSettled"
      | "ExpiredCallBurned"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnExpiredOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOptionProceeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBidder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionIdForAsset",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithEntitledVault",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithErc721",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithVault",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Signatures.SignatureStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimAsset",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnExpiredOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOptionProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionIdForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithEntitledVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithErc721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidEvent {
  export type InputTuple = [
    optionId: BigNumberish,
    bidAmount: BigNumberish,
    bidder: AddressLike
  ];
  export type OutputTuple = [
    optionId: bigint,
    bidAmount: bigint,
    bidder: string
  ];
  export interface OutputObject {
    optionId: bigint;
    bidAmount: bigint;
    bidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallCreatedEvent {
  export type InputTuple = [
    writer: AddressLike,
    vaultAddress: AddressLike,
    assetId: BigNumberish,
    optionId: BigNumberish,
    strikePrice: BigNumberish,
    expiration: BigNumberish
  ];
  export type OutputTuple = [
    writer: string,
    vaultAddress: string,
    assetId: bigint,
    optionId: bigint,
    strikePrice: bigint,
    expiration: bigint
  ];
  export interface OutputObject {
    writer: string;
    vaultAddress: string;
    assetId: bigint;
    optionId: bigint;
    strikePrice: bigint;
    expiration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallProceedsDistributedEvent {
  export type InputTuple = [
    optionId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [optionId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    optionId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallReclaimedEvent {
  export type InputTuple = [optionId: BigNumberish];
  export type OutputTuple = [optionId: bigint];
  export interface OutputObject {
    optionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallSettledEvent {
  export type InputTuple = [optionId: BigNumberish, claimable: boolean];
  export type OutputTuple = [optionId: bigint, claimable: boolean];
  export interface OutputObject {
    optionId: bigint;
    claimable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpiredCallBurnedEvent {
  export type InputTuple = [optionId: BigNumberish];
  export type OutputTuple = [optionId: bigint];
  export interface OutputObject {
    optionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IHookCoveredCall extends BaseContract {
  connect(runner?: ContractRunner | null): IHookCoveredCall;
  waitForDeployment(): Promise<this>;

  interface: IHookCoveredCallInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  bid: TypedContractMethod<[optionId: BigNumberish], [void], "payable">;

  burnExpiredOption: TypedContractMethod<
    [optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimOptionProceeds: TypedContractMethod<
    [optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  currentBid: TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;

  currentBidder: TypedContractMethod<
    [optionId: BigNumberish],
    [string],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getOptionIdForAsset: TypedContractMethod<
    [vault: AddressLike, assetId: BigNumberish],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mintWithEntitledVault: TypedContractMethod<
    [
      vaultAddress: AddressLike,
      assetId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mintWithErc721: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mintWithVault: TypedContractMethod<
    [
      vaultAddress: AddressLike,
      assetId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish,
      signature: Signatures.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  reclaimAsset: TypedContractMethod<
    [optionId: BigNumberish, returnNft: boolean],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  settleOption: TypedContractMethod<
    [optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<[optionId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "burnExpiredOption"
  ): TypedContractMethod<[optionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimOptionProceeds"
  ): TypedContractMethod<[optionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentBid"
  ): TypedContractMethod<[optionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentBidder"
  ): TypedContractMethod<[optionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getOptionIdForAsset"
  ): TypedContractMethod<
    [vault: AddressLike, assetId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintWithEntitledVault"
  ): TypedContractMethod<
    [
      vaultAddress: AddressLike,
      assetId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithErc721"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithVault"
  ): TypedContractMethod<
    [
      vaultAddress: AddressLike,
      assetId: BigNumberish,
      strikePrice: BigNumberish,
      expirationTime: BigNumberish,
      signature: Signatures.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "reclaimAsset"
  ): TypedContractMethod<
    [optionId: BigNumberish, returnNft: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleOption"
  ): TypedContractMethod<[optionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Bid"
  ): TypedContractEvent<
    BidEvent.InputTuple,
    BidEvent.OutputTuple,
    BidEvent.OutputObject
  >;
  getEvent(
    key: "CallCreated"
  ): TypedContractEvent<
    CallCreatedEvent.InputTuple,
    CallCreatedEvent.OutputTuple,
    CallCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CallProceedsDistributed"
  ): TypedContractEvent<
    CallProceedsDistributedEvent.InputTuple,
    CallProceedsDistributedEvent.OutputTuple,
    CallProceedsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "CallReclaimed"
  ): TypedContractEvent<
    CallReclaimedEvent.InputTuple,
    CallReclaimedEvent.OutputTuple,
    CallReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "CallSettled"
  ): TypedContractEvent<
    CallSettledEvent.InputTuple,
    CallSettledEvent.OutputTuple,
    CallSettledEvent.OutputObject
  >;
  getEvent(
    key: "ExpiredCallBurned"
  ): TypedContractEvent<
    ExpiredCallBurnedEvent.InputTuple,
    ExpiredCallBurnedEvent.OutputTuple,
    ExpiredCallBurnedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Bid(uint256,uint256,address)": TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;
    Bid: TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;

    "CallCreated(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CallCreatedEvent.InputTuple,
      CallCreatedEvent.OutputTuple,
      CallCreatedEvent.OutputObject
    >;
    CallCreated: TypedContractEvent<
      CallCreatedEvent.InputTuple,
      CallCreatedEvent.OutputTuple,
      CallCreatedEvent.OutputObject
    >;

    "CallProceedsDistributed(uint256,address,uint256)": TypedContractEvent<
      CallProceedsDistributedEvent.InputTuple,
      CallProceedsDistributedEvent.OutputTuple,
      CallProceedsDistributedEvent.OutputObject
    >;
    CallProceedsDistributed: TypedContractEvent<
      CallProceedsDistributedEvent.InputTuple,
      CallProceedsDistributedEvent.OutputTuple,
      CallProceedsDistributedEvent.OutputObject
    >;

    "CallReclaimed(uint256)": TypedContractEvent<
      CallReclaimedEvent.InputTuple,
      CallReclaimedEvent.OutputTuple,
      CallReclaimedEvent.OutputObject
    >;
    CallReclaimed: TypedContractEvent<
      CallReclaimedEvent.InputTuple,
      CallReclaimedEvent.OutputTuple,
      CallReclaimedEvent.OutputObject
    >;

    "CallSettled(uint256,bool)": TypedContractEvent<
      CallSettledEvent.InputTuple,
      CallSettledEvent.OutputTuple,
      CallSettledEvent.OutputObject
    >;
    CallSettled: TypedContractEvent<
      CallSettledEvent.InputTuple,
      CallSettledEvent.OutputTuple,
      CallSettledEvent.OutputObject
    >;

    "ExpiredCallBurned(uint256)": TypedContractEvent<
      ExpiredCallBurnedEvent.InputTuple,
      ExpiredCallBurnedEvent.OutputTuple,
      ExpiredCallBurnedEvent.OutputObject
    >;
    ExpiredCallBurned: TypedContractEvent<
      ExpiredCallBurnedEvent.InputTuple,
      ExpiredCallBurnedEvent.OutputTuple,
      ExpiredCallBurnedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
