/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace BlackScholes {
  export type BlackScholesInputsStruct = {
    timeToExpirySec: BigNumberish;
    volatilityDecimal: BigNumberish;
    spotDecimal: BigNumberish;
    strikePriceDecimal: BigNumberish;
    rateDecimal: BigNumberish;
  };

  export type BlackScholesInputsStructOutput = [
    timeToExpirySec: bigint,
    volatilityDecimal: bigint,
    spotDecimal: bigint,
    strikePriceDecimal: bigint,
    rateDecimal: bigint
  ] & {
    timeToExpirySec: bigint;
    volatilityDecimal: bigint;
    spotDecimal: bigint;
    strikePriceDecimal: bigint;
    rateDecimal: bigint;
  };

  export type PricesDeltaStdVegaStruct = {
    callPrice: BigNumberish;
    putPrice: BigNumberish;
    callDelta: BigNumberish;
    putDelta: BigNumberish;
    vega: BigNumberish;
    stdVega: BigNumberish;
  };

  export type PricesDeltaStdVegaStructOutput = [
    callPrice: bigint,
    putPrice: bigint,
    callDelta: bigint,
    putDelta: bigint,
    vega: bigint,
    stdVega: bigint
  ] & {
    callPrice: bigint;
    putPrice: bigint;
    callDelta: bigint;
    putDelta: bigint;
    vega: bigint;
    stdVega: bigint;
  };
}

export interface BlackScholesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_stdNormalCDF"
      | "delta"
      | "optionPrices"
      | "pricesDeltaStdVega"
      | "vega"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_stdNormalCDF",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delta",
    values: [BlackScholes.BlackScholesInputsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "optionPrices",
    values: [BlackScholes.BlackScholesInputsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "pricesDeltaStdVega",
    values: [BlackScholes.BlackScholesInputsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "vega",
    values: [BlackScholes.BlackScholesInputsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "_stdNormalCDF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricesDeltaStdVega",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vega", data: BytesLike): Result;
}

export interface BlackScholes extends BaseContract {
  connect(runner?: ContractRunner | null): BlackScholes;
  waitForDeployment(): Promise<this>;

  interface: BlackScholesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _stdNormalCDF: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  delta: TypedContractMethod<
    [bsInput: BlackScholes.BlackScholesInputsStruct],
    [[bigint, bigint] & { callDeltaDecimal: bigint; putDeltaDecimal: bigint }],
    "view"
  >;

  optionPrices: TypedContractMethod<
    [bsInput: BlackScholes.BlackScholesInputsStruct],
    [[bigint, bigint] & { call: bigint; put: bigint }],
    "view"
  >;

  pricesDeltaStdVega: TypedContractMethod<
    [bsInput: BlackScholes.BlackScholesInputsStruct],
    [BlackScholes.PricesDeltaStdVegaStructOutput],
    "view"
  >;

  vega: TypedContractMethod<
    [bsInput: BlackScholes.BlackScholesInputsStruct],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_stdNormalCDF"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "delta"
  ): TypedContractMethod<
    [bsInput: BlackScholes.BlackScholesInputsStruct],
    [[bigint, bigint] & { callDeltaDecimal: bigint; putDeltaDecimal: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "optionPrices"
  ): TypedContractMethod<
    [bsInput: BlackScholes.BlackScholesInputsStruct],
    [[bigint, bigint] & { call: bigint; put: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pricesDeltaStdVega"
  ): TypedContractMethod<
    [bsInput: BlackScholes.BlackScholesInputsStruct],
    [BlackScholes.PricesDeltaStdVegaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "vega"
  ): TypedContractMethod<
    [bsInput: BlackScholes.BlackScholesInputsStruct],
    [bigint],
    "view"
  >;

  filters: {};
}
