tosca_definitions_version: tosca_simple_yaml_1_3

imports:
- nodes/contract.yaml
- nodes/network.yaml
- nodes/wallet.yaml

topology_template:
  node_templates:
    ganache:
      type: toscachain.nodes.network.ganache
    userWallet: 
      type: toscachain.nodes.wallet
      requirements:
      - host: ganache
      properties:
        privateKey: { get_input: UserKeyGanache }
        owner: { get_input: UserWallet}

    # deploy base protocol
    adminImpl:
      type: toscachain.nodes.library
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "AdminImpl"
    operationImpl:
      type: toscachain.nodes.library
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "OperationImpl"
    soloMargin:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: adminImpl
      - libraries: operationImpl
      properties:
        abi: "SoloMargin"
        parameters:
        - 0.15e18
        - 0.05e18
        - 0.90e18
        - 0.00
        - 2.00e18
        - 0.50e18
        - 1.00e18
        - 2.00e18
        - 2.00e18
        - 100.00e18

    # deploy Interest setters
    interest:
      type: toscachain.nodes.library
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "Interest"
    math:
      type: toscachain.nodes.library
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "Math"
    polynomialInterestSetter:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: interest
      - libraries: math
      properties:
        abi: "PolynomialInterestSetter"
        parameters:
        - 1000000000000000000
        - 87960930880000

    doubleExponentInterestSetter:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: interest
      - libraries: math
      properties:
        abi: "DoubleExponentInterestSetter"
        parameters:
        - 1000000000000000000
        - 86236206100

    # deploy price oracles
    monetary:
      type: toscachain.nodes.library
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "Monetary"
    require:
      type: toscachain.nodes.library
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "Require"
    time:
      type: toscachain.nodes.library
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "Time"
    oraclePoker:
      type: toscachain.nodes.contractReference
      attributes:
        contractAddress: "0x500dd93a74dbfa65a4eeda44da489adcef530cb9"
    weth:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "WETH9"
    dai:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "TokenB"
    curve:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "TestCurve"
    uniswapDai:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "TestUniswapV2Pair"
    uniswapUsd:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "TestUniswapV2Pair2"
    daiPriceOracle:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: monetary
      - libraries: require
      - libraries: time
      - libraries: math
      - constructorCalls: oraclePoker
      - constructorCalls: weth
      - constructorCalls: dai
      - constructorCalls: curve
      - constructorCalls: uniswapDai
      - constructorCalls: uniswapUsd
      properties:
        abi: "DaiPriceOracle"
        parameters:
        -  { get_attribute: [oraclePoker, contractAddress] }
        -  { get_attribute: [weth, contractAddress] }
        -  { get_attribute: [dai, contractAddress] }
        -  { get_attribute: [curve, contractAddress] }
        -  { get_attribute: [uniswapDai, contractAddress] }
        -  { get_attribute: [uniswapUsd, contractAddress] }
        - 1000000000000000000
        - 100000000000000
        - 10000000000000000
    usdcPriceOracle:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: monetary
      properties:
        abi: "UsdcPriceOracle"

    testMakerOracle:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: monetary
      - constructorCalls: testMakerOracle
      properties:
        abi: "WethPriceOracle"
        parameters:
        -  { get_attribute: [SELF, constructorCalls, contractAddress] }

   
    wethPriceOracle:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: monetary
      - constructorCalls: testMakerOracle
      properties:
        abi: "WethPriceOracle"
        parameters:
        -  { get_attribute: [SELF, constructorCalls, contractAddress] }

    # second layer
    account:
      type: toscachain.nodes.library
      requirements:
      - host: ganache
      - wallet: userWallet
      properties:
        abi: "Account"
    # onlySolo: TODO: should be deployed?
    testCalle:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: account
      - libraries: require
      - constructorCalls: soloMarginf
      properties:
        abi: "TestCallee"
        parameters:
        -  { get_attribute: [SELF, constructorCalls, contractAddress] }
    testSimpleCallee:
      type: toscachain.nodes.contract
      requirements:
      - host: ganache
      - wallet: userWallet
      - libraries: account
      - constructorCalls: soloMargin
      properties:
        abi: "TestCallee"
        parameters:
        -  { get_attribute: [SELF, constructorCalls, contractAddress] }   

    payableProxyForSoloMargin:

  inputs:
    UserKeyGanache:
      type: string
      required: true
    UserWallet:
      type: string
      required: true